/**
 * BCFAPI
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AuthGET from './model/AuthGET';
import Authorization from './model/Authorization';
import BimSnippet from './model/BimSnippet';
import BitmapGET from './model/BitmapGET';
import Body from './model/Body';
import ClippingPlane from './model/ClippingPlane';
import Coloring from './model/Coloring';
import ColoringGET from './model/ColoringGET';
import CommentActions from './model/CommentActions';
import CommentEventGET from './model/CommentEventGET';
import CommentGET from './model/CommentGET';
import CommentGETAuthorization from './model/CommentGETAuthorization';
import CommentPOST from './model/CommentPOST';
import CommentPUT from './model/CommentPUT';
import Component from './model/Component';
import ComponentList from './model/ComponentList';
import Components from './model/Components';
import Direction from './model/Direction';
import DocumentGET from './model/DocumentGET';
import DocumentReferenceGET from './model/DocumentReferenceGET';
import DocumentReferencePOST from './model/DocumentReferencePOST';
import DynRegClientGET from './model/DynRegClientGET';
import Error from './model/Error';
import EventAction from './model/EventAction';
import ExtensionsGET from './model/ExtensionsGET';
import FileGET from './model/FileGET';
import FilePUT from './model/FilePUT';
import Line from './model/Line';
import Location from './model/Location';
import OrthogonalCamera from './model/OrthogonalCamera';
import PerspectiveCamera from './model/PerspectiveCamera';
import Point from './model/Point';
import ProjectActions from './model/ProjectActions';
import ProjectGET from './model/ProjectGET';
import ProjectGETAuthorization from './model/ProjectGETAuthorization';
import RelatedTopicGET from './model/RelatedTopicGET';
import SelectionGET from './model/SelectionGET';
import SnapshotGET from './model/SnapshotGET';
import TopicActions from './model/TopicActions';
import TopicEventGET from './model/TopicEventGET';
import TopicGET from './model/TopicGET';
import TopicGETAuthorization from './model/TopicGETAuthorization';
import TopicPOST from './model/TopicPOST';
import TopicPUT from './model/TopicPUT';
import UserGET from './model/UserGET';
import VersionsGET from './model/VersionsGET';
import VersionsGETVersions from './model/VersionsGETVersions';
import ViewSetupHints from './model/ViewSetupHints';
import ViewpointGET from './model/ViewpointGET';
import ViewpointPOST from './model/ViewpointPOST';
import Visibility from './model/Visibility';
import VisibilityGET from './model/VisibilityGET';
import CommentApi from './api/CommentApi';
import CommentEventsApi from './api/CommentEventsApi';
import DocumentApi from './api/DocumentApi';
import DocumentReferenceApi from './api/DocumentReferenceApi';
import FileApi from './api/FileApi';
import ProjectApi from './api/ProjectApi';
import PublicApi from './api/PublicApi';
import RelatedTopicApi from './api/RelatedTopicApi';
import TopicApi from './api/TopicApi';
import TopicEventsApi from './api/TopicEventsApi';
import ViewpointApi from './api/ViewpointApi';


/**
* A_BCF_API.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Bcfapi = require('index'); // See note below*.
* var xxxSvc = new Bcfapi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Bcfapi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Bcfapi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Bcfapi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AuthGET model constructor.
     * @property {module:model/AuthGET}
     */
    AuthGET,

    /**
     * The Authorization model constructor.
     * @property {module:model/Authorization}
     */
    Authorization,

    /**
     * The BimSnippet model constructor.
     * @property {module:model/BimSnippet}
     */
    BimSnippet,

    /**
     * The BitmapGET model constructor.
     * @property {module:model/BitmapGET}
     */
    BitmapGET,

    /**
     * The Body model constructor.
     * @property {module:model/Body}
     */
    Body,

    /**
     * The ClippingPlane model constructor.
     * @property {module:model/ClippingPlane}
     */
    ClippingPlane,

    /**
     * The Coloring model constructor.
     * @property {module:model/Coloring}
     */
    Coloring,

    /**
     * The ColoringGET model constructor.
     * @property {module:model/ColoringGET}
     */
    ColoringGET,

    /**
     * The CommentActions model constructor.
     * @property {module:model/CommentActions}
     */
    CommentActions,

    /**
     * The CommentEventGET model constructor.
     * @property {module:model/CommentEventGET}
     */
    CommentEventGET,

    /**
     * The CommentGET model constructor.
     * @property {module:model/CommentGET}
     */
    CommentGET,

    /**
     * The CommentGETAuthorization model constructor.
     * @property {module:model/CommentGETAuthorization}
     */
    CommentGETAuthorization,

    /**
     * The CommentPOST model constructor.
     * @property {module:model/CommentPOST}
     */
    CommentPOST,

    /**
     * The CommentPUT model constructor.
     * @property {module:model/CommentPUT}
     */
    CommentPUT,

    /**
     * The Component model constructor.
     * @property {module:model/Component}
     */
    Component,

    /**
     * The ComponentList model constructor.
     * @property {module:model/ComponentList}
     */
    ComponentList,

    /**
     * The Components model constructor.
     * @property {module:model/Components}
     */
    Components,

    /**
     * The Direction model constructor.
     * @property {module:model/Direction}
     */
    Direction,

    /**
     * The DocumentGET model constructor.
     * @property {module:model/DocumentGET}
     */
    DocumentGET,

    /**
     * The DocumentReferenceGET model constructor.
     * @property {module:model/DocumentReferenceGET}
     */
    DocumentReferenceGET,

    /**
     * The DocumentReferencePOST model constructor.
     * @property {module:model/DocumentReferencePOST}
     */
    DocumentReferencePOST,

    /**
     * The DynRegClientGET model constructor.
     * @property {module:model/DynRegClientGET}
     */
    DynRegClientGET,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The EventAction model constructor.
     * @property {module:model/EventAction}
     */
    EventAction,

    /**
     * The ExtensionsGET model constructor.
     * @property {module:model/ExtensionsGET}
     */
    ExtensionsGET,

    /**
     * The FileGET model constructor.
     * @property {module:model/FileGET}
     */
    FileGET,

    /**
     * The FilePUT model constructor.
     * @property {module:model/FilePUT}
     */
    FilePUT,

    /**
     * The Line model constructor.
     * @property {module:model/Line}
     */
    Line,

    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location,

    /**
     * The OrthogonalCamera model constructor.
     * @property {module:model/OrthogonalCamera}
     */
    OrthogonalCamera,

    /**
     * The PerspectiveCamera model constructor.
     * @property {module:model/PerspectiveCamera}
     */
    PerspectiveCamera,

    /**
     * The Point model constructor.
     * @property {module:model/Point}
     */
    Point,

    /**
     * The ProjectActions model constructor.
     * @property {module:model/ProjectActions}
     */
    ProjectActions,

    /**
     * The ProjectGET model constructor.
     * @property {module:model/ProjectGET}
     */
    ProjectGET,

    /**
     * The ProjectGETAuthorization model constructor.
     * @property {module:model/ProjectGETAuthorization}
     */
    ProjectGETAuthorization,

    /**
     * The RelatedTopicGET model constructor.
     * @property {module:model/RelatedTopicGET}
     */
    RelatedTopicGET,

    /**
     * The SelectionGET model constructor.
     * @property {module:model/SelectionGET}
     */
    SelectionGET,

    /**
     * The SnapshotGET model constructor.
     * @property {module:model/SnapshotGET}
     */
    SnapshotGET,

    /**
     * The TopicActions model constructor.
     * @property {module:model/TopicActions}
     */
    TopicActions,

    /**
     * The TopicEventGET model constructor.
     * @property {module:model/TopicEventGET}
     */
    TopicEventGET,

    /**
     * The TopicGET model constructor.
     * @property {module:model/TopicGET}
     */
    TopicGET,

    /**
     * The TopicGETAuthorization model constructor.
     * @property {module:model/TopicGETAuthorization}
     */
    TopicGETAuthorization,

    /**
     * The TopicPOST model constructor.
     * @property {module:model/TopicPOST}
     */
    TopicPOST,

    /**
     * The TopicPUT model constructor.
     * @property {module:model/TopicPUT}
     */
    TopicPUT,

    /**
     * The UserGET model constructor.
     * @property {module:model/UserGET}
     */
    UserGET,

    /**
     * The VersionsGET model constructor.
     * @property {module:model/VersionsGET}
     */
    VersionsGET,

    /**
     * The VersionsGETVersions model constructor.
     * @property {module:model/VersionsGETVersions}
     */
    VersionsGETVersions,

    /**
     * The ViewSetupHints model constructor.
     * @property {module:model/ViewSetupHints}
     */
    ViewSetupHints,

    /**
     * The ViewpointGET model constructor.
     * @property {module:model/ViewpointGET}
     */
    ViewpointGET,

    /**
     * The ViewpointPOST model constructor.
     * @property {module:model/ViewpointPOST}
     */
    ViewpointPOST,

    /**
     * The Visibility model constructor.
     * @property {module:model/Visibility}
     */
    Visibility,

    /**
     * The VisibilityGET model constructor.
     * @property {module:model/VisibilityGET}
     */
    VisibilityGET,

    /**
    * The CommentApi service constructor.
    * @property {module:api/CommentApi}
    */
    CommentApi,

    /**
    * The CommentEventsApi service constructor.
    * @property {module:api/CommentEventsApi}
    */
    CommentEventsApi,

    /**
    * The DocumentApi service constructor.
    * @property {module:api/DocumentApi}
    */
    DocumentApi,

    /**
    * The DocumentReferenceApi service constructor.
    * @property {module:api/DocumentReferenceApi}
    */
    DocumentReferenceApi,

    /**
    * The FileApi service constructor.
    * @property {module:api/FileApi}
    */
    FileApi,

    /**
    * The ProjectApi service constructor.
    * @property {module:api/ProjectApi}
    */
    ProjectApi,

    /**
    * The PublicApi service constructor.
    * @property {module:api/PublicApi}
    */
    PublicApi,

    /**
    * The RelatedTopicApi service constructor.
    * @property {module:api/RelatedTopicApi}
    */
    RelatedTopicApi,

    /**
    * The TopicApi service constructor.
    * @property {module:api/TopicApi}
    */
    TopicApi,

    /**
    * The TopicEventsApi service constructor.
    * @property {module:api/TopicEventsApi}
    */
    TopicEventsApi,

    /**
    * The ViewpointApi service constructor.
    * @property {module:api/ViewpointApi}
    */
    ViewpointApi
};
