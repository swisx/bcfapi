/**
 * BCFAPI
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocumentGET from '../model/DocumentGET';

/**
* Document service.
* @module api/DocumentApi
* @version 1.0.0
*/
export default class DocumentApi {

    /**
    * Constructs a new DocumentApi. 
    * @alias module:api/DocumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdDocumentsDocumentGuidGet operation.
     * @callback module:api/DocumentApi~bcfVersionProjectsProjectIdDocumentsDocumentGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentGET} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a document as binary file.
     * Retrieves a document as binary file.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} documentGuid Document guid
     * @param {module:api/DocumentApi~bcfVersionProjectsProjectIdDocumentsDocumentGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentGET}
     */
    bcfVersionProjectsProjectIdDocumentsDocumentGuidGet(version, projectId, documentGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdDocumentsDocumentGuidGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdDocumentsDocumentGuidGet");
      }

      // verify the required parameter 'documentGuid' is set
      if (documentGuid === undefined || documentGuid === null) {
        throw new Error("Missing the required parameter 'documentGuid' when calling bcfVersionProjectsProjectIdDocumentsDocumentGuidGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'document_guid': documentGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentGET;

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/documents/{document_guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdDocumentsGet operation.
     * @callback module:api/DocumentApi~bcfVersionProjectsProjectIdDocumentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DocumentGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of all documents uploaded to a project.
     * Retrieve a collection of all documents uploaded to a project.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {module:api/DocumentApi~bcfVersionProjectsProjectIdDocumentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DocumentGET>}
     */
    bcfVersionProjectsProjectIdDocumentsGet(version, projectId, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdDocumentsGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdDocumentsGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DocumentGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdDocumentsPost operation.
     * @callback module:api/DocumentApi~bcfVersionProjectsProjectIdDocumentsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DocumentGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a document (binary file) to a project.
     * Upload a document (binary file) to a project. This operation is only possible when the server returns the createDocument flag in the Project authorization.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {module:api/DocumentApi~bcfVersionProjectsProjectIdDocumentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DocumentGET>}
     */
    bcfVersionProjectsProjectIdDocumentsPost(version, projectId, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdDocumentsPost");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdDocumentsPost");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DocumentGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
