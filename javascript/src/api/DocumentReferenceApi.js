/**
 * BCFAPI
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocumentReferenceGET from '../model/DocumentReferenceGET';
import DocumentReferencePOST from '../model/DocumentReferencePOST';

/**
* DocumentReference service.
* @module api/DocumentReferenceApi
* @version 1.0.0
*/
export default class DocumentReferenceApi {

    /**
    * Constructs a new DocumentReferenceApi. 
    * @alias module:api/DocumentReferenceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesGet operation.
     * @callback module:api/DocumentReferenceApi~bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DocumentReferenceGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of all document references to a topic.
     * Retrieve a collection of all document references to a topic.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {module:api/DocumentReferenceApi~bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DocumentReferenceGET>}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesGet(version, projectId, topicGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DocumentReferenceGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/document_references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesPost operation.
     * @callback module:api/DocumentReferenceApi~bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DocumentReferenceGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of all document references to a topic.
     * Retrieve a collection of all document references to a topic.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentReferencePOST} opts.documentReferencePOST 
     * @param {module:api/DocumentReferenceApi~bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DocumentReferenceGET>}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesPost(version, projectId, topicGuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['documentReferencePOST'];

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesPost");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesPost");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidDocumentReferencesPost");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DocumentReferenceGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/document_references', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
