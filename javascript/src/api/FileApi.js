/**
 * BCFAPI
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileGET from '../model/FileGET';
import FilePUT from '../model/FilePUT';

/**
* File service.
* @module api/FileApi
* @version 1.0.0
*/
export default class FileApi {

    /**
    * Constructs a new FileApi. 
    * @alias module:api/FileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidFilesGet operation.
     * @callback module:api/FileApi~bcfVersionProjectsProjectIdTopicsTopicGuidFilesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of file references as topic header.
     * Retrieve a collection of file references as topic header.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {module:api/FileApi~bcfVersionProjectsProjectIdTopicsTopicGuidFilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileGET>}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidFilesGet(version, projectId, topicGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidFilesGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidFilesGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidFilesGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [FileGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidFilesPut operation.
     * @callback module:api/FileApi~bcfVersionProjectsProjectIdTopicsTopicGuidFilesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileGET} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a collection of file references on the topic header.
     * Update a collection of file references on the topic header. This operation is only possible when the server returns the updateFiles flag in the Topic authorization.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {Object} opts Optional parameters
     * @param {module:model/FilePUT} opts.filePUT 
     * @param {module:api/FileApi~bcfVersionProjectsProjectIdTopicsTopicGuidFilesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileGET}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidFilesPut(version, projectId, topicGuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['filePUT'];

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidFilesPut");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidFilesPut");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidFilesPut");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileGET;

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/files', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
