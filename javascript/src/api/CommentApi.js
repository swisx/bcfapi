/**
 * BCFAPI
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommentGET from '../model/CommentGET';
import CommentPOST from '../model/CommentPOST';
import CommentPUT from '../model/CommentPUT';

/**
* Comment service.
* @module api/CommentApi
* @version 1.0.0
*/
export default class CommentApi {

    /**
    * Constructs a new CommentApi. 
    * @alias module:api/CommentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidDelete operation.
     * @callback module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single comment.
     * Deletes a single comment. This operation is only possible when the server returns the delete flag in the Comment authorization.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {String} commentGuid Comment guid
     * @param {module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidDelete(version, projectId, topicGuid, commentGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidDelete");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidDelete");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidDelete");
      }

      // verify the required parameter 'commentGuid' is set
      if (commentGuid === undefined || commentGuid === null) {
        throw new Error("Missing the required parameter 'commentGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidDelete");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid,
        'comment_guid': commentGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/comments/{comment_guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidGet operation.
     * @callback module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentGET} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of all comments related to a topic
     * Retrieve a collection of all comments related to a topic (default ordering is date).
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {String} commentGuid Comment guid
     * @param {module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentGET}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidGet(version, projectId, topicGuid, commentGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidGet");
      }

      // verify the required parameter 'commentGuid' is set
      if (commentGuid === undefined || commentGuid === null) {
        throw new Error("Missing the required parameter 'commentGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid,
        'comment_guid': commentGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentGET;

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/comments/{comment_guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidPut operation.
     * @callback module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentGET} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single comment
     * Update a single comment, description similar to POST. This operation is only possible when the server returns the update flag in the Comment authorization.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {String} commentGuid Comment guid
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentPUT} opts.commentPUT 
     * @param {module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentGET}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidPut(version, projectId, topicGuid, commentGuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentPUT'];

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidPut");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidPut");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidPut");
      }

      // verify the required parameter 'commentGuid' is set
      if (commentGuid === undefined || commentGuid === null) {
        throw new Error("Missing the required parameter 'commentGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsCommentGuidPut");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid,
        'comment_guid': commentGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentGET;

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/comments/{comment_guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidCommentsGet operation.
     * @callback module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of all comments related to a topic
     * Retrieve a collection of all comments related to a topic (default ordering is date).
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentGET>}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidCommentsGet(version, projectId, topicGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CommentGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidCommentsPost operation.
     * @callback module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentGET} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new comment to a topic.
     * Add a new comment to a topic. This operation is only possible when the server returns the createComment flag in the Topic authorization.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentPOST} opts.commentPOST 
     * @param {module:api/CommentApi~bcfVersionProjectsProjectIdTopicsTopicGuidCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentGET}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidCommentsPost(version, projectId, topicGuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentPOST'];

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsPost");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsPost");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidCommentsPost");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentGET;

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
