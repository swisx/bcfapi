/**
 * BCFAPI
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ColoringGET from '../model/ColoringGET';
import SelectionGET from '../model/SelectionGET';
import ViewpointGET from '../model/ViewpointGET';
import ViewpointPOST from '../model/ViewpointPOST';
import VisibilityGET from '../model/VisibilityGET';

/**
* Viewpoint service.
* @module api/ViewpointApi
* @version 1.0.0
*/
export default class ViewpointApi {

    /**
    * Constructs a new ViewpointApi. 
    * @alias module:api/ViewpointApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsGet operation.
     * @callback module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ViewpointGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of all viewpoints related to a topic.
     * Retrieve a collection of all viewpoints related to a topic.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ViewpointGET>}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsGet(version, projectId, topicGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ViewpointGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/viewpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsPost operation.
     * @callback module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewpointGET} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new viewpoint.
     * Add a new viewpoint. Viewpoints are immutable, meaning that they should never change. Requirements for different visualizations should be handled by creating new viewpoint elements. This operation is only possible when the server returns the createViewpoint flag in the Topic authorization.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {Object} opts Optional parameters
     * @param {module:model/ViewpointPOST} opts.viewpointPOST 
     * @param {module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewpointGET}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsPost(version, projectId, topicGuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['viewpointPOST'];

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsPost");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsPost");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsPost");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ViewpointGET;

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/viewpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidBitmapsBitmapGuidGet operation.
     * @callback module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidBitmapsBitmapGuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a specific viewpoints bitmap image file (png or jpg).
     * Retrieve a specific viewpoints bitmap image file (png or jpg).
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {String} viewpointGuid Viewpoint guid
     * @param {String} bitmapGuid Bitmap guid
     * @param {module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidBitmapsBitmapGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidBitmapsBitmapGuidGet(version, projectId, topicGuid, viewpointGuid, bitmapGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidBitmapsBitmapGuidGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidBitmapsBitmapGuidGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidBitmapsBitmapGuidGet");
      }

      // verify the required parameter 'viewpointGuid' is set
      if (viewpointGuid === undefined || viewpointGuid === null) {
        throw new Error("Missing the required parameter 'viewpointGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidBitmapsBitmapGuidGet");
      }

      // verify the required parameter 'bitmapGuid' is set
      if (bitmapGuid === undefined || bitmapGuid === null) {
        throw new Error("Missing the required parameter 'bitmapGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidBitmapsBitmapGuidGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid,
        'viewpoint_guid': viewpointGuid,
        'bitmap_guid': bitmapGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/viewpoints/{viewpoint_guid}/bitmaps/{bitmap_guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidColoringGet operation.
     * @callback module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidColoringGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ColoringGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of all colored components in a viewpoint.
     * Retrieve a collection of all colored components in a viewpoint.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {String} viewpointGuid Viewpoint guid
     * @param {module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidColoringGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ColoringGET>}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidColoringGet(version, projectId, topicGuid, viewpointGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidColoringGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidColoringGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidColoringGet");
      }

      // verify the required parameter 'viewpointGuid' is set
      if (viewpointGuid === undefined || viewpointGuid === null) {
        throw new Error("Missing the required parameter 'viewpointGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidColoringGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid,
        'viewpoint_guid': viewpointGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ColoringGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/viewpoints/{viewpoint_guid}/coloring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidGet operation.
     * @callback module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ViewpointGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of all viewpoints related to a topic.
     * Retrieve a collection of all viewpoints related to a topic.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {String} viewpointGuid Viewpoint guid
     * @param {module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ViewpointGET>}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidGet(version, projectId, topicGuid, viewpointGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidGet");
      }

      // verify the required parameter 'viewpointGuid' is set
      if (viewpointGuid === undefined || viewpointGuid === null) {
        throw new Error("Missing the required parameter 'viewpointGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid,
        'viewpoint_guid': viewpointGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ViewpointGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/viewpoints/{viewpoint_guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSelectionGet operation.
     * @callback module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSelectionGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SelectionGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a collection of all selected components in a viewpoint.
     * Retrieve a collection of all selected components in a viewpoint.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {String} viewpointGuid Viewpoint guid
     * @param {module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSelectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SelectionGET>}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSelectionGet(version, projectId, topicGuid, viewpointGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSelectionGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSelectionGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSelectionGet");
      }

      // verify the required parameter 'viewpointGuid' is set
      if (viewpointGuid === undefined || viewpointGuid === null) {
        throw new Error("Missing the required parameter 'viewpointGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSelectionGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid,
        'viewpoint_guid': viewpointGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SelectionGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/viewpoints/{viewpoint_guid}/selection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSnapshotGet operation.
     * @callback module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSnapshotGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a viewpoints snapshot (png or jpg) as image file.
     * Retrieve a viewpoints snapshot (png or jpg) as image file.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {String} viewpointGuid Viewpoint guid
     * @param {module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSnapshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSnapshotGet(version, projectId, topicGuid, viewpointGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSnapshotGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSnapshotGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSnapshotGet");
      }

      // verify the required parameter 'viewpointGuid' is set
      if (viewpointGuid === undefined || viewpointGuid === null) {
        throw new Error("Missing the required parameter 'viewpointGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidSnapshotGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid,
        'viewpoint_guid': viewpointGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/viewpoints/{viewpoint_guid}/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidVisibilityGet operation.
     * @callback module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidVisibilityGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VisibilityGET>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve visibility of components in a viewpoint.
     * Retrieve visibility of components in a viewpoint.
     * @param {module:model/String} version BFC Version
     * @param {String} projectId Project ID
     * @param {String} topicGuid Topic guid
     * @param {String} viewpointGuid Viewpoint guid
     * @param {module:api/ViewpointApi~bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidVisibilityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VisibilityGET>}
     */
    bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidVisibilityGet(version, projectId, topicGuid, viewpointGuid, callback) {
      let postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidVisibilityGet");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidVisibilityGet");
      }

      // verify the required parameter 'topicGuid' is set
      if (topicGuid === undefined || topicGuid === null) {
        throw new Error("Missing the required parameter 'topicGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidVisibilityGet");
      }

      // verify the required parameter 'viewpointGuid' is set
      if (viewpointGuid === undefined || viewpointGuid === null) {
        throw new Error("Missing the required parameter 'viewpointGuid' when calling bcfVersionProjectsProjectIdTopicsTopicGuidViewpointsViewpointGuidVisibilityGet");
      }


      let pathParams = {
        'version': version,
        'project_id': projectId,
        'topic_guid': topicGuid,
        'viewpoint_guid': viewpointGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [VisibilityGET];

      return this.apiClient.callApi(
        '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/viewpoints/{viewpoint_guid}/visibility', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
