<?php
/**
 * AuthGET
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BCFAPI
 *
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuthGET Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AuthGET implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'auth_GET';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'oauth2_auth_url' => 'string',
        'oauth2_token_url' => 'string',
        'oauth2_dynamic_client_reg_url' => 'string',
        'http_basic_supported' => 'bool',
        'supported_oauth2_flows' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'oauth2_auth_url' => null,
        'oauth2_token_url' => null,
        'oauth2_dynamic_client_reg_url' => null,
        'http_basic_supported' => null,
        'supported_oauth2_flows' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oauth2_auth_url' => 'oauth2_auth_url',
        'oauth2_token_url' => 'oauth2_token_url',
        'oauth2_dynamic_client_reg_url' => 'oauth2_dynamic_client_reg_url',
        'http_basic_supported' => 'http_basic_supported',
        'supported_oauth2_flows' => 'supported_oauth2_flows'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oauth2_auth_url' => 'setOauth2AuthUrl',
        'oauth2_token_url' => 'setOauth2TokenUrl',
        'oauth2_dynamic_client_reg_url' => 'setOauth2DynamicClientRegUrl',
        'http_basic_supported' => 'setHttpBasicSupported',
        'supported_oauth2_flows' => 'setSupportedOauth2Flows'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oauth2_auth_url' => 'getOauth2AuthUrl',
        'oauth2_token_url' => 'getOauth2TokenUrl',
        'oauth2_dynamic_client_reg_url' => 'getOauth2DynamicClientRegUrl',
        'http_basic_supported' => 'getHttpBasicSupported',
        'supported_oauth2_flows' => 'getSupportedOauth2Flows'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['oauth2_auth_url'] = isset($data['oauth2_auth_url']) ? $data['oauth2_auth_url'] : null;
        $this->container['oauth2_token_url'] = isset($data['oauth2_token_url']) ? $data['oauth2_token_url'] : null;
        $this->container['oauth2_dynamic_client_reg_url'] = isset($data['oauth2_dynamic_client_reg_url']) ? $data['oauth2_dynamic_client_reg_url'] : null;
        $this->container['http_basic_supported'] = isset($data['http_basic_supported']) ? $data['http_basic_supported'] : null;
        $this->container['supported_oauth2_flows'] = isset($data['supported_oauth2_flows']) ? $data['supported_oauth2_flows'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets oauth2_auth_url
     *
     * @return string
     */
    public function getOauth2AuthUrl()
    {
        return $this->container['oauth2_auth_url'];
    }

    /**
     * Sets oauth2_auth_url
     *
     * @param string $oauth2_auth_url oauth2_auth_url
     *
     * @return $this
     */
    public function setOauth2AuthUrl($oauth2_auth_url)
    {
        $this->container['oauth2_auth_url'] = $oauth2_auth_url;

        return $this;
    }

    /**
     * Gets oauth2_token_url
     *
     * @return string
     */
    public function getOauth2TokenUrl()
    {
        return $this->container['oauth2_token_url'];
    }

    /**
     * Sets oauth2_token_url
     *
     * @param string $oauth2_token_url oauth2_token_url
     *
     * @return $this
     */
    public function setOauth2TokenUrl($oauth2_token_url)
    {
        $this->container['oauth2_token_url'] = $oauth2_token_url;

        return $this;
    }

    /**
     * Gets oauth2_dynamic_client_reg_url
     *
     * @return string
     */
    public function getOauth2DynamicClientRegUrl()
    {
        return $this->container['oauth2_dynamic_client_reg_url'];
    }

    /**
     * Sets oauth2_dynamic_client_reg_url
     *
     * @param string $oauth2_dynamic_client_reg_url oauth2_dynamic_client_reg_url
     *
     * @return $this
     */
    public function setOauth2DynamicClientRegUrl($oauth2_dynamic_client_reg_url)
    {
        $this->container['oauth2_dynamic_client_reg_url'] = $oauth2_dynamic_client_reg_url;

        return $this;
    }

    /**
     * Gets http_basic_supported
     *
     * @return bool
     */
    public function getHttpBasicSupported()
    {
        return $this->container['http_basic_supported'];
    }

    /**
     * Sets http_basic_supported
     *
     * @param bool $http_basic_supported http_basic_supported
     *
     * @return $this
     */
    public function setHttpBasicSupported($http_basic_supported)
    {
        $this->container['http_basic_supported'] = $http_basic_supported;

        return $this;
    }

    /**
     * Gets supported_oauth2_flows
     *
     * @return string[]
     */
    public function getSupportedOauth2Flows()
    {
        return $this->container['supported_oauth2_flows'];
    }

    /**
     * Sets supported_oauth2_flows
     *
     * @param string[] $supported_oauth2_flows supported_oauth2_flows
     *
     * @return $this
     */
    public function setSupportedOauth2Flows($supported_oauth2_flows)
    {
        $this->container['supported_oauth2_flows'] = $supported_oauth2_flows;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

