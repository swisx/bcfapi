<?php
/**
 * BitmapGET
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BCFAPI
 *
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BitmapGET Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BitmapGET implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'bitmap_GET';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'guid' => 'string',
        'bitmap_type' => 'string',
        'location' => '\Swagger\Client\Model\Location',
        'normal' => '\Swagger\Client\Model\Direction',
        'up' => '\Swagger\Client\Model\Direction',
        'height' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'guid' => null,
        'bitmap_type' => null,
        'location' => null,
        'normal' => null,
        'up' => null,
        'height' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'guid',
        'bitmap_type' => 'bitmap_type',
        'location' => 'location',
        'normal' => 'normal',
        'up' => 'up',
        'height' => 'height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'bitmap_type' => 'setBitmapType',
        'location' => 'setLocation',
        'normal' => 'setNormal',
        'up' => 'setUp',
        'height' => 'setHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'bitmap_type' => 'getBitmapType',
        'location' => 'getLocation',
        'normal' => 'getNormal',
        'up' => 'getUp',
        'height' => 'getHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BITMAP_TYPE_JPG = 'jpg';
    const BITMAP_TYPE_PNG = 'png';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBitmapTypeAllowableValues()
    {
        return [
            self::BITMAP_TYPE_JPG,
            self::BITMAP_TYPE_PNG,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['bitmap_type'] = isset($data['bitmap_type']) ? $data['bitmap_type'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['normal'] = isset($data['normal']) ? $data['normal'] : null;
        $this->container['up'] = isset($data['up']) ? $data['up'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBitmapTypeAllowableValues();
        if (!in_array($this->container['bitmap_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'bitmap_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getBitmapTypeAllowableValues();
        if (!in_array($this->container['bitmap_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string $guid guid
     *
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets bitmap_type
     *
     * @return string
     */
    public function getBitmapType()
    {
        return $this->container['bitmap_type'];
    }

    /**
     * Sets bitmap_type
     *
     * @param string $bitmap_type bitmap_type
     *
     * @return $this
     */
    public function setBitmapType($bitmap_type)
    {
        $allowedValues = $this->getBitmapTypeAllowableValues();
        if (!is_null($bitmap_type) && !in_array($bitmap_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'bitmap_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bitmap_type'] = $bitmap_type;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets normal
     *
     * @return \Swagger\Client\Model\Direction
     */
    public function getNormal()
    {
        return $this->container['normal'];
    }

    /**
     * Sets normal
     *
     * @param \Swagger\Client\Model\Direction $normal normal
     *
     * @return $this
     */
    public function setNormal($normal)
    {
        $this->container['normal'] = $normal;

        return $this;
    }

    /**
     * Gets up
     *
     * @return \Swagger\Client\Model\Direction
     */
    public function getUp()
    {
        return $this->container['up'];
    }

    /**
     * Sets up
     *
     * @param \Swagger\Client\Model\Direction $up up
     *
     * @return $this
     */
    public function setUp($up)
    {
        $this->container['up'] = $up;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

