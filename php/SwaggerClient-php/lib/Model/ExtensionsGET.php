<?php
/**
 * ExtensionsGET
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BCFAPI
 *
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ExtensionsGET Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ExtensionsGET implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'extensions_GET';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'topic_type' => 'string[]',
        'topic_status' => 'string[]',
        'topic_label' => 'string[]',
        'snippet_type' => 'string[]',
        'priority' => 'string[]',
        'user_id_type' => 'string[]',
        'stage' => 'string[]',
        'topic_actions' => '\Swagger\Client\Model\TopicActions',
        'project_actions' => '\Swagger\Client\Model\ProjectActions',
        'comment_actions' => '\Swagger\Client\Model\CommentActions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'topic_type' => null,
        'topic_status' => null,
        'topic_label' => null,
        'snippet_type' => null,
        'priority' => null,
        'user_id_type' => null,
        'stage' => null,
        'topic_actions' => null,
        'project_actions' => null,
        'comment_actions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'topic_type' => 'topic_type',
        'topic_status' => 'topic_status',
        'topic_label' => 'topic_label',
        'snippet_type' => 'snippet_type',
        'priority' => 'priority',
        'user_id_type' => 'user_id_type',
        'stage' => 'stage',
        'topic_actions' => 'topic_actions',
        'project_actions' => 'project_actions',
        'comment_actions' => 'comment_actions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'topic_type' => 'setTopicType',
        'topic_status' => 'setTopicStatus',
        'topic_label' => 'setTopicLabel',
        'snippet_type' => 'setSnippetType',
        'priority' => 'setPriority',
        'user_id_type' => 'setUserIdType',
        'stage' => 'setStage',
        'topic_actions' => 'setTopicActions',
        'project_actions' => 'setProjectActions',
        'comment_actions' => 'setCommentActions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'topic_type' => 'getTopicType',
        'topic_status' => 'getTopicStatus',
        'topic_label' => 'getTopicLabel',
        'snippet_type' => 'getSnippetType',
        'priority' => 'getPriority',
        'user_id_type' => 'getUserIdType',
        'stage' => 'getStage',
        'topic_actions' => 'getTopicActions',
        'project_actions' => 'getProjectActions',
        'comment_actions' => 'getCommentActions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['topic_type'] = isset($data['topic_type']) ? $data['topic_type'] : null;
        $this->container['topic_status'] = isset($data['topic_status']) ? $data['topic_status'] : null;
        $this->container['topic_label'] = isset($data['topic_label']) ? $data['topic_label'] : null;
        $this->container['snippet_type'] = isset($data['snippet_type']) ? $data['snippet_type'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['user_id_type'] = isset($data['user_id_type']) ? $data['user_id_type'] : null;
        $this->container['stage'] = isset($data['stage']) ? $data['stage'] : null;
        $this->container['topic_actions'] = isset($data['topic_actions']) ? $data['topic_actions'] : null;
        $this->container['project_actions'] = isset($data['project_actions']) ? $data['project_actions'] : null;
        $this->container['comment_actions'] = isset($data['comment_actions']) ? $data['comment_actions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['topic_type'] === null) {
            $invalidProperties[] = "'topic_type' can't be null";
        }
        if ($this->container['topic_status'] === null) {
            $invalidProperties[] = "'topic_status' can't be null";
        }
        if ($this->container['topic_label'] === null) {
            $invalidProperties[] = "'topic_label' can't be null";
        }
        if ($this->container['snippet_type'] === null) {
            $invalidProperties[] = "'snippet_type' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['user_id_type'] === null) {
            $invalidProperties[] = "'user_id_type' can't be null";
        }
        if ($this->container['stage'] === null) {
            $invalidProperties[] = "'stage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['topic_type'] === null) {
            return false;
        }
        if ($this->container['topic_status'] === null) {
            return false;
        }
        if ($this->container['topic_label'] === null) {
            return false;
        }
        if ($this->container['snippet_type'] === null) {
            return false;
        }
        if ($this->container['priority'] === null) {
            return false;
        }
        if ($this->container['user_id_type'] === null) {
            return false;
        }
        if ($this->container['stage'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets topic_type
     *
     * @return string[]
     */
    public function getTopicType()
    {
        return $this->container['topic_type'];
    }

    /**
     * Sets topic_type
     *
     * @param string[] $topic_type topic_type
     *
     * @return $this
     */
    public function setTopicType($topic_type)
    {
        $this->container['topic_type'] = $topic_type;

        return $this;
    }

    /**
     * Gets topic_status
     *
     * @return string[]
     */
    public function getTopicStatus()
    {
        return $this->container['topic_status'];
    }

    /**
     * Sets topic_status
     *
     * @param string[] $topic_status topic_status
     *
     * @return $this
     */
    public function setTopicStatus($topic_status)
    {
        $this->container['topic_status'] = $topic_status;

        return $this;
    }

    /**
     * Gets topic_label
     *
     * @return string[]
     */
    public function getTopicLabel()
    {
        return $this->container['topic_label'];
    }

    /**
     * Sets topic_label
     *
     * @param string[] $topic_label topic_label
     *
     * @return $this
     */
    public function setTopicLabel($topic_label)
    {
        $this->container['topic_label'] = $topic_label;

        return $this;
    }

    /**
     * Gets snippet_type
     *
     * @return string[]
     */
    public function getSnippetType()
    {
        return $this->container['snippet_type'];
    }

    /**
     * Sets snippet_type
     *
     * @param string[] $snippet_type snippet_type
     *
     * @return $this
     */
    public function setSnippetType($snippet_type)
    {
        $this->container['snippet_type'] = $snippet_type;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string[]
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string[] $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets user_id_type
     *
     * @return string[]
     */
    public function getUserIdType()
    {
        return $this->container['user_id_type'];
    }

    /**
     * Sets user_id_type
     *
     * @param string[] $user_id_type user_id_type
     *
     * @return $this
     */
    public function setUserIdType($user_id_type)
    {
        $this->container['user_id_type'] = $user_id_type;

        return $this;
    }

    /**
     * Gets stage
     *
     * @return string[]
     */
    public function getStage()
    {
        return $this->container['stage'];
    }

    /**
     * Sets stage
     *
     * @param string[] $stage stage
     *
     * @return $this
     */
    public function setStage($stage)
    {
        $this->container['stage'] = $stage;

        return $this;
    }

    /**
     * Gets topic_actions
     *
     * @return \Swagger\Client\Model\TopicActions
     */
    public function getTopicActions()
    {
        return $this->container['topic_actions'];
    }

    /**
     * Sets topic_actions
     *
     * @param \Swagger\Client\Model\TopicActions $topic_actions topic_actions
     *
     * @return $this
     */
    public function setTopicActions($topic_actions)
    {
        $this->container['topic_actions'] = $topic_actions;

        return $this;
    }

    /**
     * Gets project_actions
     *
     * @return \Swagger\Client\Model\ProjectActions
     */
    public function getProjectActions()
    {
        return $this->container['project_actions'];
    }

    /**
     * Sets project_actions
     *
     * @param \Swagger\Client\Model\ProjectActions $project_actions project_actions
     *
     * @return $this
     */
    public function setProjectActions($project_actions)
    {
        $this->container['project_actions'] = $project_actions;

        return $this;
    }

    /**
     * Gets comment_actions
     *
     * @return \Swagger\Client\Model\CommentActions
     */
    public function getCommentActions()
    {
        return $this->container['comment_actions'];
    }

    /**
     * Sets comment_actions
     *
     * @param \Swagger\Client\Model\CommentActions $comment_actions comment_actions
     *
     * @return $this
     */
    public function setCommentActions($comment_actions)
    {
        $this->container['comment_actions'] = $comment_actions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

