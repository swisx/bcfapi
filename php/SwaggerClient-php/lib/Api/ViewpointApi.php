<?php
/**
 * ViewpointApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BCFAPI
 *
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ViewpointApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ViewpointApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGet
     *
     * Retrieve a specific viewpoints bitmap image file (png or jpg).
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Bitmap guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGet($version, $project_id, $guid)
    {
        $this->bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetWithHttpInfo($version, $project_id, $guid);
    }

    /**
     * Operation bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetWithHttpInfo
     *
     * Retrieve a specific viewpoints bitmap image file (png or jpg).
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Bitmap guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '';
        $request = $this->bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetRequest($version, $project_id, $guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetAsync
     *
     * Retrieve a specific viewpoints bitmap image file (png or jpg).
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Bitmap guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetAsync($version, $project_id, $guid)
    {
        return $this->bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetAsyncWithHttpInfo($version, $project_id, $guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetAsyncWithHttpInfo
     *
     * Retrieve a specific viewpoints bitmap image file (png or jpg).
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Bitmap guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetAsyncWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '';
        $request = $this->bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetRequest($version, $project_id, $guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Bitmap guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGetRequest($version, $project_id, $guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGet'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling bcfVersionProjectsGuidTopicsGuidViewpointsGuidBitmapsGuidGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{guid}/topics/{guid}/viewpoints/{guid}/bitmaps/{guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGet
     *
     * Retrieve a viewpoints snapshot (png or jpg) as image file.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGet($version, $project_id, $guid)
    {
        $this->bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetWithHttpInfo($version, $project_id, $guid);
    }

    /**
     * Operation bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetWithHttpInfo
     *
     * Retrieve a viewpoints snapshot (png or jpg) as image file.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '';
        $request = $this->bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetRequest($version, $project_id, $guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetAsync
     *
     * Retrieve a viewpoints snapshot (png or jpg) as image file.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetAsync($version, $project_id, $guid)
    {
        return $this->bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetAsyncWithHttpInfo($version, $project_id, $guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetAsyncWithHttpInfo
     *
     * Retrieve a viewpoints snapshot (png or jpg) as image file.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetAsyncWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '';
        $request = $this->bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetRequest($version, $project_id, $guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGetRequest($version, $project_id, $guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGet'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling bcfVersionProjectsGuidTopicsGuidViewpointsGuidSnapshotGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{guid}/topics/{guid}/viewpoints/{guid}/snapshot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGet
     *
     * Retrieve a collection of all viewpoints related to a topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ViewpointGET[]
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGet($version, $project_id, $guid)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGetWithHttpInfo($version, $project_id, $guid);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGetWithHttpInfo
     *
     * Retrieve a collection of all viewpoints related to a topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ViewpointGET[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGetWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\ViewpointGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGetRequest($version, $project_id, $guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViewpointGET[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGetAsync
     *
     * Retrieve a collection of all viewpoints related to a topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGetAsync($version, $project_id, $guid)
    {
        return $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGetAsyncWithHttpInfo($version, $project_id, $guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGetAsyncWithHttpInfo
     *
     * Retrieve a collection of all viewpoints related to a topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGetAsyncWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\ViewpointGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGetRequest($version, $project_id, $guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsGuidViewpointsGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsGuidViewpointsGetRequest($version, $project_id, $guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGet'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{guid}/viewpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGet
     *
     * Retrieve a collection of all colored components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ColoringGET[]
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGet($version, $project_id, $guid)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetWithHttpInfo($version, $project_id, $guid);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetWithHttpInfo
     *
     * Retrieve a collection of all colored components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ColoringGET[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\ColoringGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetRequest($version, $project_id, $guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ColoringGET[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetAsync
     *
     * Retrieve a collection of all colored components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetAsync($version, $project_id, $guid)
    {
        return $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetAsyncWithHttpInfo($version, $project_id, $guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetAsyncWithHttpInfo
     *
     * Retrieve a collection of all colored components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetAsyncWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\ColoringGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetRequest($version, $project_id, $guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGetRequest($version, $project_id, $guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGet'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidColoringGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{guid}/viewpoints/{guid}/coloring';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGet
     *
     * Retrieve a collection of all viewpoints related to a topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ViewpointGET[]
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGet($version, $project_id, $guid)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetWithHttpInfo($version, $project_id, $guid);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetWithHttpInfo
     *
     * Retrieve a collection of all viewpoints related to a topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ViewpointGET[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\ViewpointGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetRequest($version, $project_id, $guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViewpointGET[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetAsync
     *
     * Retrieve a collection of all viewpoints related to a topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetAsync($version, $project_id, $guid)
    {
        return $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetAsyncWithHttpInfo($version, $project_id, $guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetAsyncWithHttpInfo
     *
     * Retrieve a collection of all viewpoints related to a topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetAsyncWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\ViewpointGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetRequest($version, $project_id, $guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGetRequest($version, $project_id, $guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGet'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{guid}/viewpoints/{guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGet
     *
     * Retrieve a collection of all selected components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SelectionGET[]
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGet($version, $project_id, $guid)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetWithHttpInfo($version, $project_id, $guid);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetWithHttpInfo
     *
     * Retrieve a collection of all selected components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SelectionGET[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\SelectionGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetRequest($version, $project_id, $guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SelectionGET[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetAsync
     *
     * Retrieve a collection of all selected components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetAsync($version, $project_id, $guid)
    {
        return $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetAsyncWithHttpInfo($version, $project_id, $guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetAsyncWithHttpInfo
     *
     * Retrieve a collection of all selected components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetAsyncWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\SelectionGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetRequest($version, $project_id, $guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGetRequest($version, $project_id, $guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGet'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidSelectionGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{guid}/viewpoints/{guid}/selection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGet
     *
     * Retrieve visibility of components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VisibilityGET[]
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGet($version, $project_id, $guid)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetWithHttpInfo($version, $project_id, $guid);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetWithHttpInfo
     *
     * Retrieve visibility of components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VisibilityGET[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\VisibilityGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetRequest($version, $project_id, $guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VisibilityGET[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetAsync
     *
     * Retrieve visibility of components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetAsync($version, $project_id, $guid)
    {
        return $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetAsyncWithHttpInfo($version, $project_id, $guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetAsyncWithHttpInfo
     *
     * Retrieve visibility of components in a viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetAsyncWithHttpInfo($version, $project_id, $guid)
    {
        $returnType = '\Swagger\Client\Model\VisibilityGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetRequest($version, $project_id, $guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Viewpoint guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGetRequest($version, $project_id, $guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGet'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsGuidVisibilityGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{guid}/viewpoints/{guid}/visibility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsPost
     *
     * Add a new viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     * @param  \Swagger\Client\Model\ViewpointPOST $viewpoint_post viewpoint_post (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ViewpointGET
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsPost($version, $project_id, $guid, $viewpoint_post = null)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsPostWithHttpInfo($version, $project_id, $guid, $viewpoint_post);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsPostWithHttpInfo
     *
     * Add a new viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     * @param  \Swagger\Client\Model\ViewpointPOST $viewpoint_post (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ViewpointGET, HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsPostWithHttpInfo($version, $project_id, $guid, $viewpoint_post = null)
    {
        $returnType = '\Swagger\Client\Model\ViewpointGET';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsPostRequest($version, $project_id, $guid, $viewpoint_post);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ViewpointGET',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsPostAsync
     *
     * Add a new viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     * @param  \Swagger\Client\Model\ViewpointPOST $viewpoint_post (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsPostAsync($version, $project_id, $guid, $viewpoint_post = null)
    {
        return $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsPostAsyncWithHttpInfo($version, $project_id, $guid, $viewpoint_post)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGuidViewpointsPostAsyncWithHttpInfo
     *
     * Add a new viewpoint.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     * @param  \Swagger\Client\Model\ViewpointPOST $viewpoint_post (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGuidViewpointsPostAsyncWithHttpInfo($version, $project_id, $guid, $viewpoint_post = null)
    {
        $returnType = '\Swagger\Client\Model\ViewpointGET';
        $request = $this->bcfVersionProjectsProjectIdTopicsGuidViewpointsPostRequest($version, $project_id, $guid, $viewpoint_post);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsGuidViewpointsPost'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $guid Topic guid (required)
     * @param  \Swagger\Client\Model\ViewpointPOST $viewpoint_post (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsGuidViewpointsPostRequest($version, $project_id, $guid, $viewpoint_post = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsPost'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsPost'
            );
        }
        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $guid when calling bcfVersionProjectsProjectIdTopicsGuidViewpointsPost'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{guid}/viewpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($guid !== null) {
            $resourcePath = str_replace(
                '{' . 'guid' . '}',
                ObjectSerializer::toPathValue($guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($viewpoint_post)) {
            $_tempBody = $viewpoint_post;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
