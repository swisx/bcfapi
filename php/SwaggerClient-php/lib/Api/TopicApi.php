<?php
/**
 * TopicApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BCFAPI
 *
 * A BCF API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TopicApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TopicApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGet
     *
     * Retrieve a collection of topics related to a project
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TopicGET[]
     */
    public function bcfVersionProjectsProjectIdTopicsGet($version, $project_id)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsGetWithHttpInfo($version, $project_id);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGetWithHttpInfo
     *
     * Retrieve a collection of topics related to a project
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TopicGET[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsGetWithHttpInfo($version, $project_id)
    {
        $returnType = '\Swagger\Client\Model\TopicGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGetRequest($version, $project_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TopicGET[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGetAsync
     *
     * Retrieve a collection of topics related to a project
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGetAsync($version, $project_id)
    {
        return $this->bcfVersionProjectsProjectIdTopicsGetAsyncWithHttpInfo($version, $project_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsGetAsyncWithHttpInfo
     *
     * Retrieve a collection of topics related to a project
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsGetAsyncWithHttpInfo($version, $project_id)
    {
        $returnType = '\Swagger\Client\Model\TopicGET[]';
        $request = $this->bcfVersionProjectsProjectIdTopicsGetRequest($version, $project_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsGetRequest($version, $project_id)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsPost
     *
     * Add a new topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  \Swagger\Client\Model\TopicPOST $topic_post topic_post (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TopicGET
     */
    public function bcfVersionProjectsProjectIdTopicsPost($version, $project_id, $topic_post = null)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsPostWithHttpInfo($version, $project_id, $topic_post);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsPostWithHttpInfo
     *
     * Add a new topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  \Swagger\Client\Model\TopicPOST $topic_post (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TopicGET, HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsPostWithHttpInfo($version, $project_id, $topic_post = null)
    {
        $returnType = '\Swagger\Client\Model\TopicGET';
        $request = $this->bcfVersionProjectsProjectIdTopicsPostRequest($version, $project_id, $topic_post);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TopicGET',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsPostAsync
     *
     * Add a new topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  \Swagger\Client\Model\TopicPOST $topic_post (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsPostAsync($version, $project_id, $topic_post = null)
    {
        return $this->bcfVersionProjectsProjectIdTopicsPostAsyncWithHttpInfo($version, $project_id, $topic_post)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsPostAsyncWithHttpInfo
     *
     * Add a new topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  \Swagger\Client\Model\TopicPOST $topic_post (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsPostAsyncWithHttpInfo($version, $project_id, $topic_post = null)
    {
        $returnType = '\Swagger\Client\Model\TopicGET';
        $request = $this->bcfVersionProjectsProjectIdTopicsPostRequest($version, $project_id, $topic_post);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsPost'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  \Swagger\Client\Model\TopicPOST $topic_post (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsPostRequest($version, $project_id, $topic_post = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsPost'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsPost'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($topic_post)) {
            $_tempBody = $topic_post;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidDelete
     *
     * Deletes a single topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidDelete($version, $project_id, $topic_guid)
    {
        $this->bcfVersionProjectsProjectIdTopicsTopicGuidDeleteWithHttpInfo($version, $project_id, $topic_guid);
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidDeleteWithHttpInfo
     *
     * Deletes a single topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidDeleteWithHttpInfo($version, $project_id, $topic_guid)
    {
        $returnType = '';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidDeleteRequest($version, $project_id, $topic_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidDeleteAsync
     *
     * Deletes a single topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidDeleteAsync($version, $project_id, $topic_guid)
    {
        return $this->bcfVersionProjectsProjectIdTopicsTopicGuidDeleteAsyncWithHttpInfo($version, $project_id, $topic_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidDeleteAsyncWithHttpInfo
     *
     * Deletes a single topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidDeleteAsyncWithHttpInfo($version, $project_id, $topic_guid)
    {
        $returnType = '';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidDeleteRequest($version, $project_id, $topic_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsTopicGuidDelete'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsTopicGuidDeleteRequest($version, $project_id, $topic_guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsTopicGuidDelete'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsTopicGuidDelete'
            );
        }
        // verify the required parameter 'topic_guid' is set
        if ($topic_guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topic_guid when calling bcfVersionProjectsProjectIdTopicsTopicGuidDelete'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{topic_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($topic_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'topic_guid' . '}',
                ObjectSerializer::toPathValue($topic_guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidGet
     *
     * Retrieve a specific topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TopicGET
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidGet($version, $project_id, $topic_guid)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsTopicGuidGetWithHttpInfo($version, $project_id, $topic_guid);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidGetWithHttpInfo
     *
     * Retrieve a specific topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TopicGET, HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidGetWithHttpInfo($version, $project_id, $topic_guid)
    {
        $returnType = '\Swagger\Client\Model\TopicGET';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidGetRequest($version, $project_id, $topic_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TopicGET',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidGetAsync
     *
     * Retrieve a specific topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidGetAsync($version, $project_id, $topic_guid)
    {
        return $this->bcfVersionProjectsProjectIdTopicsTopicGuidGetAsyncWithHttpInfo($version, $project_id, $topic_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidGetAsyncWithHttpInfo
     *
     * Retrieve a specific topic.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidGetAsyncWithHttpInfo($version, $project_id, $topic_guid)
    {
        $returnType = '\Swagger\Client\Model\TopicGET';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidGetRequest($version, $project_id, $topic_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsTopicGuidGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsTopicGuidGetRequest($version, $project_id, $topic_guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsTopicGuidGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsTopicGuidGet'
            );
        }
        // verify the required parameter 'topic_guid' is set
        if ($topic_guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topic_guid when calling bcfVersionProjectsProjectIdTopicsTopicGuidGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{topic_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($topic_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'topic_guid' . '}',
                ObjectSerializer::toPathValue($topic_guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidPut
     *
     * Modify a specific topic
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     * @param  \Swagger\Client\Model\TopicPUT $topic_put topic_put (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TopicGET
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidPut($version, $project_id, $topic_guid, $topic_put = null)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsTopicGuidPutWithHttpInfo($version, $project_id, $topic_guid, $topic_put);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidPutWithHttpInfo
     *
     * Modify a specific topic
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     * @param  \Swagger\Client\Model\TopicPUT $topic_put (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TopicGET, HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidPutWithHttpInfo($version, $project_id, $topic_guid, $topic_put = null)
    {
        $returnType = '\Swagger\Client\Model\TopicGET';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidPutRequest($version, $project_id, $topic_guid, $topic_put);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TopicGET',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidPutAsync
     *
     * Modify a specific topic
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     * @param  \Swagger\Client\Model\TopicPUT $topic_put (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidPutAsync($version, $project_id, $topic_guid, $topic_put = null)
    {
        return $this->bcfVersionProjectsProjectIdTopicsTopicGuidPutAsyncWithHttpInfo($version, $project_id, $topic_guid, $topic_put)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidPutAsyncWithHttpInfo
     *
     * Modify a specific topic
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     * @param  \Swagger\Client\Model\TopicPUT $topic_put (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidPutAsyncWithHttpInfo($version, $project_id, $topic_guid, $topic_put = null)
    {
        $returnType = '\Swagger\Client\Model\TopicGET';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidPutRequest($version, $project_id, $topic_guid, $topic_put);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsTopicGuidPut'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     * @param  \Swagger\Client\Model\TopicPUT $topic_put (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsTopicGuidPutRequest($version, $project_id, $topic_guid, $topic_put = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsTopicGuidPut'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsTopicGuidPut'
            );
        }
        // verify the required parameter 'topic_guid' is set
        if ($topic_guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topic_guid when calling bcfVersionProjectsProjectIdTopicsTopicGuidPut'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{topic_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($topic_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'topic_guid' . '}',
                ObjectSerializer::toPathValue($topic_guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($topic_put)) {
            $_tempBody = $topic_put;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGet
     *
     * Retrieves a topics BIM-Snippet as binary file.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BimSnippet
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGet($version, $project_id, $topic_guid)
    {
        list($response) = $this->bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetWithHttpInfo($version, $project_id, $topic_guid);
        return $response;
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetWithHttpInfo
     *
     * Retrieves a topics BIM-Snippet as binary file.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BimSnippet, HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetWithHttpInfo($version, $project_id, $topic_guid)
    {
        $returnType = '\Swagger\Client\Model\BimSnippet';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetRequest($version, $project_id, $topic_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BimSnippet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetAsync
     *
     * Retrieves a topics BIM-Snippet as binary file.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetAsync($version, $project_id, $topic_guid)
    {
        return $this->bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetAsyncWithHttpInfo($version, $project_id, $topic_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetAsyncWithHttpInfo
     *
     * Retrieves a topics BIM-Snippet as binary file.
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetAsyncWithHttpInfo($version, $project_id, $topic_guid)
    {
        $returnType = '\Swagger\Client\Model\BimSnippet';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetRequest($version, $project_id, $topic_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGet'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGetRequest($version, $project_id, $topic_guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGet'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGet'
            );
        }
        // verify the required parameter 'topic_guid' is set
        if ($topic_guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topic_guid when calling bcfVersionProjectsProjectIdTopicsTopicGuidSnippetGet'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/snippet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($topic_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'topic_guid' . '}',
                ObjectSerializer::toPathValue($topic_guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPut
     *
     * Puts a new BIM Snippet binary file to a topic
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPut($version, $project_id, $topic_guid)
    {
        $this->bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutWithHttpInfo($version, $project_id, $topic_guid);
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutWithHttpInfo
     *
     * Puts a new BIM Snippet binary file to a topic
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutWithHttpInfo($version, $project_id, $topic_guid)
    {
        $returnType = '';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutRequest($version, $project_id, $topic_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutAsync
     *
     * Puts a new BIM Snippet binary file to a topic
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutAsync($version, $project_id, $topic_guid)
    {
        return $this->bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutAsyncWithHttpInfo($version, $project_id, $topic_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutAsyncWithHttpInfo
     *
     * Puts a new BIM Snippet binary file to a topic
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutAsyncWithHttpInfo($version, $project_id, $topic_guid)
    {
        $returnType = '';
        $request = $this->bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutRequest($version, $project_id, $topic_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPut'
     *
     * @param  string $version BFC Version (required)
     * @param  string $project_id Project ID (required)
     * @param  string $topic_guid Topic guid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPutRequest($version, $project_id, $topic_guid)
    {
        // verify the required parameter 'version' is set
        if ($version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPut'
            );
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPut'
            );
        }
        // verify the required parameter 'topic_guid' is set
        if ($topic_guid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topic_guid when calling bcfVersionProjectsProjectIdTopicsTopicGuidSnippetPut'
            );
        }

        $resourcePath = '/bcf/{version}/projects/{project_id}/topics/{topic_guid}/snippet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($topic_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'topic_guid' . '}',
                ObjectSerializer::toPathValue($topic_guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
